<?php

use Illuminate\Database\Seeder;

class SWE1BpDescriptionsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('bp_descriptions')->insert([
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP1',
             'bp_description' => "ソフトウェア要件の仕様化\nシステム要件、システムアーキテクチャ、ならびにシステム要件およびアーキテクチャへの変更を使用し、ソフトウェアに必要となる機能および非機能要件を、ソフトウェア要件仕様に明記する。[成果1,5,7]\n備考1:機能および性能に影響を及ぼすアプリケーションパラメーターは、システム要件の一部である。\n備考2:ソフトウェア開発のみの場合、システム要件およびシステムアーキテクチャは与えられた運用環境のことを示す(備考5も参照のこと)。この場合、利害関係者要件は、ソフトウェアに必要となる機能および性能を識別するベースとして、ならびにソフトウェアの機能および性能に影響を及ぼすアプリケーションパラメーターを識別するベースとして使用すべきである。"
            ],
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP2',
             'bp_description' => "ソフトウェア要件の構造化\nソフトウェア要件を、ソフトウェア要件仕様の中で以下のように構造化する。\n・プロジェクトにおける関連内容に基づくグループ化\n・プロジェクトにおける論理的順序に基づく並べ替え\n・プロジェクトに関連する基準に基づく分類\n・利害関係者のニーズに基づく優先順位付け\n[成果2,4]\n備考3:一般的に優先順位付けには、計画したリリースにソフトウェア項目を割り当てることが含まれる。SPL.2.BP1を参照のこと。"
            ],
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP3',
             'bp_description' => "ソフトウェア要件の分析\n明記したソフトウェア要件を、その相互関係を含めて分析し、正確性、技術的実現可能性、および検証可能性を保証し、リスクの識別に役立てる。コストおよびスケジュールへの影響、ならびに技術的な影響を分析する。[成果2,7]\n備考4:コストおよびスケジュールへの影響分析は、プロジェクトの見積もりの修正に役立つ。MAN.3.BP5を参照のこと。"
            ],
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP4',
             'bp_description' => "運用環境における影響の分析\nソフトウェア要件がシステムエレメントのインタフェースおよび運用環境に及ぼす影響を分析する。[成果3,7]\n備考5:運用環境は、実行するソフトウェアを内に含むシステムとして定義される(例：ハードウェア、オペレーティングシステム等)。"
            ],
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP5',
             'bp_description' => "検証基準の作成\n各ソフトウェア要件に対して、その要件の検証における定性的におよび定量的な手段を定義した検証基準を作成する。[成果2,7]\n備考6:検証基準は、要件が合意した制約内で検証できることを実証する。一般的に検証基準は、ソフトウェア要件への遵守を実証すべく、ソフトウェアテストケースの作成または他の検証手段のインプットとして使用する。\n備考7:テストで取り扱うことのできない検証は、SUP.2で実施する。"
            ],
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP6',
             'bp_description' => "双方向トレーサビリティの確立\nシステム要件とソフトウェア要件との間の双方向トレーサビリティを確立する。システムアーキテクチャとソフトウェア要件との間の双方向トレーサビリティを確立する。[成果6]\n備考8:これらの取り組みは、プロジェクトおよび組織のニーズを網羅するように組み合わせることで、重複を防ぐべきである。\n備考9:双方向トレーサビリティは、網羅性、一貫性、および影響分析に役立つ。"
            ],
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP7',
             'bp_description' => "一貫性の確保\nシステム要件とソフトウェア要件との間の一貫性を確保する。システムアーキテクチャとソフトウェア要件との間の一貫性を確保する。[成果6]\n備考10:一貫性は、双方向トレーサビリティによって裏付けられ、レビュー記録によって実証できる。\n備考11:ソフトウェア開発のみの場合、システム要件およびシステムアーキテクチャは与えられた運用環境のことを示す(備考2も参照のこと)。この場合、一貫性および双方向トレーサビリティは、利害関係者要件とソフトウェア要件との間で確保しなければならない。。"
            ],
            [
             'process_area_name' => 'SWE1',
             'bp_number' => 'BP8',
             'bp_description' => "合意したソフトウェア要件の伝達\n合意したソフトウェア要件、およびソフトウェア要件の更新をすべての関係者へ伝達する。[成果8]"
            ],
            
        ]);
    }
}
