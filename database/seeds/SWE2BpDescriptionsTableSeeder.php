<?php

use Illuminate\Database\Seeder;

class SWE2BpDescriptionsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('bp_descriptions')->insert([
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP1',
             'bp_description' => "ソフトウェアアーキテクチャ設計書の作成\nソフトウェアエレメントをソフトウェアの機能要件および非機能要件の観点から明記したソフトウェアアーキテクチャ設計書を作成し、文書化する。[成果1]\n備考1:ソフトウェアは、適切な階層レベルでエレメントに分割する。エレメントは、詳細設計に記載されるソフトウェアコンポーネント(ソフトウェアアーキテクチャ設計の最下位レベルのエレメント)になるまで分割する。"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP2',
             'bp_description' => "ソフトウェア要件の割り当て\nソフトウェア要件をソフトウェアアーキテクチャ設計のエレメントに割り当てる。[成果2]"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP3',
             'bp_description' => "ソフトウェアエレメントのインタフェースの定義\n各ソフトウェアエレメントのインタフェースを識別し、作成し、文書化する。[成果3]"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP4',
             'bp_description' => "動的な振る舞いの記述\nシステムにおいて必要となる動的な振る舞いを満足させるために、ソフトウェアエレメントのタイミングおよび動的な相互作用を評価し、文書化する。[成果4]\n備考2:動的な振る舞いは、運用モード(例：スタートアップ、シャットダウン、通常モード、キャリブレーション、診断等)、プロセス間通信、タスク、スレッド、タイムスライス、割り込み等によって決定する。\n備考3:ターゲットプラットフォーム、およびターゲット上で想定される負荷は、動的な振る舞いを評価する際に考慮すべきである。"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP5',
             'bp_description' => "リソース消費目標の定義\n適切な階層レベルのソフトウェアアーキテクチャ設計において、該当するすべてのエレメントに対してリソース消費目標を決定し、文書化する。[成果4]\n備考4:一般的にリソース消費量は、メモリ(ROM、RAM、外部/内部EEPROM、データフラッシュ)、CPU負荷などに対して決定する。"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP6',
             'bp_description' => "ソフトウェアアーキテクチャの選択肢の評価\nアーキテクチャに対する評価基準を定義する。定義した基準に従って、ソフトウェアアーキテクチャの選択肢を評価する。ソフトウェアアーキテクチャの選択根拠を記録する。[成果1,2,3,4,5]\n備考5:評価基準には、品質特性(モジュール性、保守性、拡張性、スケーラビリティ、信頼性、セキュリティの実現、および利用可能性)、および「作成・購入・再利用」の分析結果が含まれる。"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP7',
             'bp_description' => "双方向トレーサビリティの確立\nソフトウェア要件と、ソフトウェアアーキテクチャ設計のエレメントとの間の双方向トレーサビリティを確立する。[成果5]\n備考6:双方向トレーサビリティには、ソフトウェア要件をソフトウェアアーキテクチャ設計のエレメントに割り当てることが含まれる。\n備考7:双方向トレーサビリティは、網羅性、一貫性、および影響分析に役立つ。"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP8',
             'bp_description' => "一貫性の確保\nソフトウェア要件とソフトウェアアーキテクチャ設計との間の一貫性を確保する。[成果1,2,5,6]\n備考8:一貫性は、双方向トレーサビリティによって裏付けられ、レビュー記録によって実証できる。"
            ],
            [
             'process_area_name' => 'SWE2',
             'bp_number' => 'BP9',
             'bp_description' => "合意したソフトウェアアーキテクチャ設計の伝達\n合意したソフトウェアアーキテクチャ設計、およびソフトウェアアーキテクチャ設計の更新をすべての関係者へ伝達する。[成果6]"
            ],

        ]);
    }
}
