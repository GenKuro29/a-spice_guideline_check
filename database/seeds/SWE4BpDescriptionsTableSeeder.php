<?php

use Illuminate\Database\Seeder;

class SWE4BpDescriptionsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('bp_descriptions')->insert([
            [
             'process_area_name' => 'SWE4',
             'bp_number' => 'BP1',
             'bp_description' => "回帰戦略を含むソフトウェアユニット検証戦略の策定\nソフトウェアユニットの変更時に再検証するための回帰戦略を含むソフトウェアユニット検証戦略を策定する。検証戦略は、ソフトウェアユニットがソフトウェア詳細設計および非機能要件に遵守している証拠の提供方法を定義しなければならない。[成果1]\n備考1:想定されるユニット検証技法には、静的/動的解析、コードレビュー、ユニットテスト等が含まれる。"
            ],
            [
             'process_area_name' => 'SWE4',
             'bp_number' => 'BP2',
             'bp_description' => "ユニット検証のための基準の作成\nソフトウェアコンポーネント内のユニットおよびそれらの相関関係が、ソフトウェア詳細設計および非機能要件に遵守している証拠を提供するために、検証戦略に従ってユニット検証のための基準を作成する。ユニットテストにおいて、基準はユニットテスト仕様書の中に定義しなければならない。[成果2]\n備考2:想定されるユニット検証のための基準は、ユニットテストケース、ユニットテストデータ、静的検証、カバレッジ目標、MISRAルール等のコーディング標準が含まれる。\n備考3:ユニットテスト仕様は、例えば、自動化テストベンチのスクリプトとして実装してもよい。"
            ],
            [
             'process_area_name' => 'SWE4',
             'bp_number' => 'BP3',
             'bp_description' => "ソフトウェアユニットの静的検証の実施\n定義した検証のための基準を使用して、ソフトウェアユニットが正しいことを検証する。静的検証結果を記録する。[成果3]\n備考4:静的検証には、静的解析、コードレビュー、コーディング標準およびガイドラインに基づいた確認、ならびに他の技法を含む。\n備考5:不適合事項の取り扱いについては、SUP.9を参照のこと。"
            ],
            [
             'process_area_name' => 'SWE4',
             'bp_number' => 'BP4',
             'bp_description' => "ソフトウェアユニットのテスト\nソフトウェアユニット検証戦略に従って、ユニットテスト仕様を使用してソフトウェアユニットに対するテストを実施する。テスト結果およびテストログを記録する。[成果3]\n備考6:不適合事項の取り扱いについては、SUP.9を参照のこと。"
            ],
            [
             'process_area_name' => 'SWE4',
             'bp_number' => 'BP5',
             'bp_description' => "双方向トレーサビリティの確立\nソフトウェアユニットと静的検証との間の双方向トレーサビリティを確立する。ソフトウェア詳細設計とユニットテスト仕様との間の双方向トレーサビリティを確立する。ユニットテスト仕様とユニットテスト結果との間の双方向トレーサビリティを確立する。[成果4]\n備考7:双方向トレーサビリティは、網羅性、一貫性、および影響分析に役立つ。"
            ],
            [
             'process_area_name' => 'SWE4',
             'bp_number' => 'BP6',
             'bp_description' => "一貫性の確保\nソフトウェア詳細設計とユニットテスト仕様との間の一貫性を確保する。[成果4]\n備考8:一貫性は、双方向トレーサビリティによって裏付けられ、レビュー記録によって実証できる。"
            ],
            [
             'process_area_name' => 'SWE4',
             'bp_number' => 'BP7',
             'bp_description' => "結果の要約及び伝達\nユニットテスト結果および静的兼用結果を要約し、影響を受けるすべての関係者へ伝達する。[成果5]\n備考9:テストケース実行に必要な情報すべてを要約の中に記述することで、他の関係者は結果の判定が可能となる。"
            ],

        ]);
    }
}
